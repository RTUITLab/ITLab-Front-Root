trigger:
  - master
  - develop

name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: ubuntu-latest

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildCommand: "run developbuild"
    buildImage: false
    deployService: false
    deployEnvironment: "no"
    imageTags: "no"
    serviceName: "no"
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildCommand: "run developbuild"
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_proxy-front
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildCommand: "run build"
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_proxy-front

stages:
  - stage: Build
    jobs:
      - job: BuildFrontRoot
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "10.x"
            displayName: "Install Node.js"
          - script: |
              npx jake mode=${{variables.deployEnvironment}}
            displayName: "Jake"
          - publish: deploy
            artifact: itlab-front-root-build

  - stage: PushDockerImage
    condition: and(succeeded(), ${{variables.buildImage}})
    displayName: Push Docker Image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          - download: current
            artifact: itlab-front-root-build
          - task: Docker@2
            displayName: Build an image
            inputs:
              containerRegistry: "rtuitlab connection by admin"
              repository: "rtuitlab/itlab-front-root"
              command: "buildAndPush"
              Dockerfile: "$(Pipeline.Workspace)/itlab-front-root-build/Dockerfile"
              buildContext: "$(Pipeline.Workspace)/itlab-front-root-build"
              tags: ${{variables.imageTags}}
  - stage: UpdateService
    condition: and(succeeded(), ${{variables.deployService}})
    jobs:
      - deployment: Deploy
        pool:
          vmImage: "ubuntu-latest"
        environment: ${{variables.deployEnvironment}}
        strategy:
          runOnce:
            on:
              failure:
                steps:
                  - download: none
                  - task: SSH@0
                    inputs:
                      sshEndpoint: "swarm manager"
                      runOptions: "commands"
                      commands: "docker service rollback ${{variables.serviceName}}"
                      readyTimeout: "20000"
            deploy:
              steps:
                - download: none
                - task: SSH@0
                  inputs:
                    sshEndpoint: "swarm manager"
                    runOptions: "commands"
                    commands: "docker service update --image rtuitlab/itlab-front-root:$(Build.BuildId) ${{variables.serviceName}}"
                    readyTimeout: "20000"
